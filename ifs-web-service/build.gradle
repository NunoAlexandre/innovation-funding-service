def targetBuild = hasProperty('profile') ? profile : 'docker';
apply from: targetBuild+"-build.gradle";


project(':ifs-web-service').bootRepackage {
    onlyIf{ Task task -> false}
}

jar.enabled=false

subprojects {

    // ifs-web-core is not a docker project.
    if (it.name != 'ifs-web-core') {

        task prepareDockerFile(type: Copy) {

            ext.appName = 'default-service-name'
            outputs.upToDateWhen { false }
            from '../docker/'
            into 'src/main/docker/'
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter {
                it.replaceAll('@version@', project.properties['version']).replaceAll('@app_name@', appName)
            }
        }

        task buildDocker(type: Docker, dependsOn: build) {
            push = false
            applicationName = 'default-service-name'
            dockerfile = file('src/main/docker/Dockerfile')
            tagVersion = 'latest'
            doFirst {
                copy {
                    from jar
                    into stageDir
                }
                copy {
                    from file("${rootProject.projectDir}/setup-files/scripts/docker/coscale-monitoring.sh")
                    into stageDir
                }
            }
        }

        buildDocker.dependsOn prepareDockerFile

        // Workaround for https://github.com/spring-projects/spring-boot/issues/8308
        // Can reinstate excludeDevtools in the bootRepackage task in next release
        springBoot {
            excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
        }

        bootRepackage {
            mainClass = 'org.innovateuk.ifs.Application'
        //    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
        }
    }
}


task endpointDocumentation(type: Task) {
    dependsOn "ifs-application-service:test"
    dependsOn "ifs-assessment-service:test"
    dependsOn "ifs-competition-mgt-service:test"
    dependsOn "ifs-project-setup-mgt-service:test"
    dependsOn "ifs-project-setup-service:test"

    def combinedFilename = 'build/web-endpoints.csv'

    doLast {
        def files = fileTree(dir: '.', include: '**/*-endpoints.csv', exclude: combinedFilename)
        def lines = []
        files.each {
            it.eachLine { line ->
                lines << line
            }
        }

        File buildFolder = file("build")
        buildFolder.mkdirs()
        File combinedFile = file(combinedFilename)
        if (combinedFile.exists()) {
            combinedFile.delete()
        }
        combinedFile.append('"path", "method", "constraint", "rule", "description"\n')
        combinedFile.append(
                lines
                        .findAll {
                    it.startsWith('"/')
                }
                .sort()
                        .join("\n")
        )
        println("Wrote web endpoint documentation to " + combinedFile)
    }
}

build.finalizedBy endpointDocumentation
