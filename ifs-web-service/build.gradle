if (project.hasProperty("profile")) {
    apply from: "${project.profile}-build.gradle"
} else {
    apply from: "dev-build.gradle"
}

war {
    baseName = 'ifs-web-service'
    version = '0.0.1-SNAPSHOT'
}

bootRun {
    addResources = false
}

configurations {
    providedRuntime
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
    compile "org.thymeleaf.extras:thymeleaf-extras-java8time:2.1.0.RELEASE"
    compile "javax.servlet:javax.servlet-api:3.1.0"
    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.projectlombok:lombok:1.16.2"
    compile "org.springframework.plugin:spring-plugin-core"
    compile "com.jayway.jsonpath:json-path"
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'commons-beanutils:commons-beanutils:1.8.3'
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "com.google.guava:guava:16.0.1"
    compile "org.apache.httpcomponents:httpclient:4.5.1"
    compile "org.apache.httpcomponents:httpasyncclient:4.1.1"
    compile "javax.inject:javax.inject:1"

    // Use this for including the api lib from the data-service.
    compile files('libs/ifs-data-service-api-1.0-SNAPSHOT.jar')
    testCompile files('libs/ifs-data-service-tests-1.0-SNAPSHOT.jar')
    testCompile "com.openpojo:openpojo:0.8.3"
}


task deployToTomcat(type: Copy) {
    from war
    into "$tomcatWebAppsDir"
    rename '(.*).war', 'ROOT.war'
}

task copyTemplatesInPlace(type: Copy) {
    into "$tomcatWebAppsDir/ROOT/WEB-INF/classes/templates"
    from 'src/main/resources/templates'
}

task copyCssInPlace(type: Copy) {
    into "$tomcatWebAppsDir/ROOT/WEB-INF/classes/static/css"
    from 'src/main/resources/static/css'
}

task copyJsInPlace(type: Copy) {
    into "$tomcatWebAppsDir/ROOT/WEB-INF/classes/static/js/dest"
    from 'src/main/resources/static/js/dest'
}
watch {

    java {
        files files('src/main/java')
        tasks('deployToTomcat')
    }

    templates {
        files files('src/main/resources/templates')
        tasks 'copyTemplatesInPlace'
    }

    css {
        files files('src/main/resources/static/css')
        tasks 'copyCssInPlace'
    }
    js {
        files files('src/main/resources/static/js/dest')
        tasks 'copyJsInPlace'
    }
}

processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
    if (project.hasProperty("profile") && project.profile == "automated") {
        exclude '**/application.properties'
    }
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/domain/**.java"
    }
}

task cleanDeploy() {
    build.mustRunAfter clean
    deployToTomcat.mustRunAfter build
    dependsOn clean
    dependsOn build
    dependsOn deployToTomcat
}
