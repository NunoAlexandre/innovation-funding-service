import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

def targetBuild = hasProperty('profile') ? profile : 'docker';
apply from: targetBuild + "-build.gradle";


project(':ifs-web-service').bootRepackage {
    onlyIf { Task task -> false }
}

jar.enabled = false

subprojects {

    // ifs-web-core is not a docker project.
    if (it.name != 'ifs-web-core') {

        task getNewRelicAgent {
            if ( !file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.jar").exists() ||
                 !file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.yml").exists() ) {
                exec {
                    executable = 'curl'
                    args = ['--connect-timeout', '30',
                            '-o', "${rootProject.projectDir}/setup-files/scripts/docker/newrelic.jar",
                            'https://tools.innovateuk.org/holding/newrelic/newrelic.jar'
                    ]
                }
                exec {
                    executable = 'curl'
                    args = ['--connect-timeout', '30',
                            '-o', "${rootProject.projectDir}/setup-files/scripts/docker/newrelic.yml",
                            'https://tools.innovateuk.org/holding/newrelic/newrelic.yml'
                    ]
                }
            }
        }

        /**
         * This task creates a `docker` directory in the $BUILD/docker` directory of the project,
         * where it will write all the necessary files to build a docker container.
         * In other words, after this task is executed, one could manually run `docker build .`
         * in the output directory.
         */
        task prepareDockerInput {
            dependsOn getNewRelicAgent
            dependsOn build
            def inputDir = project.file("$project.buildDir/docker")

            doFirst {
                copy {
                    from '../docker/'
                    into inputDir
                    include 'Dockerfile-template'
                    rename 'Dockerfile-template', 'Dockerfile'
                    filter {
                        it.replaceAll('@version@', project.properties['version']).replaceAll('@app_name@', jar.baseName)
                    }
                }
                copy {
                    from jar
                    into inputDir
                }
                copy {
                    from file("${rootProject.projectDir}/setup-files/scripts/docker/coscale-monitoring.sh")
                    into inputDir
                }
                copy {
                    from file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.jar")
                    from file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.yml")
                    into inputDir
                }
            }
        }

        task buildDocker(type: DockerBuildImage) {
            dependsOn prepareDockerInput
            tag = "innovateuk/"+project.name.replaceAll(/ifs-/,"")+":latest"
            inputDir = project.file("$project.buildDir/docker")
        }


        // Workaround for https://github.com/spring-projects/spring-boot/issues/8308
        // Can reinstate excludeDevtools in the bootRepackage task in next release
        springBoot {
            excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
        }

        bootRepackage {
            mainClass = 'org.innovateuk.ifs.Application'
            //    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
        }
    }
}


task endpointDocumentation(type: Task) {
    dependsOn "ifs-application-service:test"
    dependsOn "ifs-assessment-service:test"
    dependsOn "ifs-competition-mgt-service:test"
    dependsOn "ifs-project-setup-mgt-service:test"
    dependsOn "ifs-project-setup-service:test"

    def combinedFilename = 'build/web-endpoints.csv'

    doLast {
        def files = fileTree(dir: '.', include: '**/*-endpoints.csv', exclude: combinedFilename)
        def lines = []
        files.each {
            it.eachLine { line ->
                lines << line
            }
        }

        File buildFolder = file("build")
        buildFolder.mkdirs()
        File combinedFile = file(combinedFilename)
        if (combinedFile.exists()) {
            combinedFile.delete()
        }
        combinedFile.append('"path", "method", "constraint", "rule", "description"\n')
        combinedFile.append(
                lines
                        .findAll {
                    it.startsWith('"/')
                }
                .sort()
                        .join("\n")
        )
        println("Wrote web endpoint documentation to " + combinedFile)
    }
}

build.finalizedBy endpointDocumentation


    task prepareFractalDockerInput {

        def inputDir = project.file("$project.buildDir/fractal")

        doFirst {
            copy {
                from file("ifs-web-core/src/main/resources/templates/fractal-components")
                into file("${inputDir}/fractal-components")
            }
            copy {
                from file("ifs-web-core/src/main/resources/static")
                into file("${inputDir}/static")
            }
            copy {
                from file("fractal.js")
                into inputDir
            }
            copy {
                from file("fractal")
                into inputDir
            }
        }
    }

    task buildFractal(type: DockerBuildImage) {
        dependsOn prepareFractalDockerInput
        tag = "innovateuk/fractal:latest"
        inputDir = project.file("$project.buildDir/fractal")
    }
