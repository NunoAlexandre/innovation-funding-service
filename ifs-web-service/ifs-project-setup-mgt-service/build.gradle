apply plugin: 'war'

war {
    baseName = 'project-setup-management'
}


bootRepackage {
    mainClass = 'com.worth.ifs.Application'
}

configurations {
    providedRuntime
}

dependencies {
    compile project(':ifs-web-service:ifs-web-core')

    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.springframework.plugin:spring-plugin-core"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.google.guava:guava:16.0.1"
    compile "commons-io:commons-io:2.4"

    testCompile project(':ifs-commons').sourceSets.test.output
    testCompile "com.openpojo:openpojo:0.8.3"
    testCompile "org.skyscreamer:jsonassert:1.3.0"
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "net.sf.opencsv:opencsv:2.3"
    testCompile project(':ifs-web-service:ifs-web-core').sourceSets.test.output
}

processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
    if (project.hasProperty("profile") && project.profile == "automated") {
        exclude '**/application.properties'
    }
}

task copyTemplatesInPlace(type: Copy) {
    into "$tomcatWebAppsDir/project-setup-management/WEB-INF/classes/templates"
    from 'src/main/resources/templates'
}

task copyCssInPlace(type: Copy) {
    into "$tomcatWebAppsDir/project-setup-management/WEB-INF/classes/static/css"
    from 'src/main/resources/static/css'
}

task copyJsInPlace(type: Copy) {
    into "$tomcatWebAppsDir/project-setup-management/WEB-INF/classes/static/js/dest"
    from 'src/main/resources/static/js/dest'
}


task deployToTomcat(type: Copy) {
    from war
    into "$tomcatWebAppsDir"
    rename '(.*).war', 'project-setup-management.war'
}

task buildDocker( type:Docker, dependsOn: build) {
    push = false
    applicationName = 'project-setup-management-service'
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from war
            into stageDir
        }
    }
}

task cleanDeployMicroservices() {
    build.mustRunAfter clean
    dependsOn clean
    dependsOn buildDocker
}

task cleanDeploy() {
    build.mustRunAfter clean
    deployToTomcat.mustRunAfter build
    dependsOn clean
    dependsOn build
    dependsOn deployToTomcat
}
