import org.apache.tools.ant.filters.ReplaceTokens

jar {
    baseName = 'project-setup-management'
}

//
// Workaround for https://github.com/spring-projects/spring-boot/issues/8308
// Can reinstate excludeDevtools in the bootRepackage task in next release
//
springBoot {
    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
}

bootRepackage {
    mainClass = 'org.innovateuk.ifs.Application'
//    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
}

dependencies {
    compile project(':ifs-web-service:ifs-web-core')

    // weirdly, removing this line from this web module will cause the build to pull in version 2.1.2.RELEASE
    // despite 3.0.1.RELEASE being specified explicitly in ifs-web-core's build.gradle
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.1.RELEASE"
    compile "org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.0.RELEASE"

    compile "commons-io:commons-io:2.5"

    testCompile project(':ifs-resources').sourceSets.test.output
    testCompile project(":ifs-commons").sourceSets.test.output
    testCompile project(':ifs-web-service:ifs-web-core').sourceSets.test.output

    testCompile "com.openpojo:openpojo:0.8.4"
    testCompile "org.skyscreamer:jsonassert:1.3.0"
    testCompile "net.sf.opencsv:opencsv:2.3"
}

processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
    if (project.hasProperty("profile") && project.profile == "automated") {
        exclude '**/application.properties'
    }
}

task prepareDockerFile (type: Copy) {
    outputs.upToDateWhen { false }
    from '../docker/'
    into 'src/main/docker/'
    include 'Dockerfile-template'
    rename 'Dockerfile-template', 'Dockerfile'
    filter(ReplaceTokens, tokens: [version: project.properties['version'], app_name: 'project-setup-management'])
}

task buildDocker( type:Docker, dependsOn: build) {
    push = false
    applicationName = 'project-setup-management-service'
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
        copy {
            from file("${rootProject.projectDir}/setup-files/scripts/docker/coscale-monitoring.sh")
            into stageDir
        }
    }
}
buildDocker.dependsOn prepareDockerFile
