subprojects{
    bootRepackage {
        onlyIf { Task task -> false }
    }
}

buildscript {
    repositories { mavenCentral() }
}

def String spCertsVolume = 'ifs-sp-service/src/main/docker/certs'
def String idpCertsVolume = 'ifs-idp-service/src/main/docker/certs'

// if there is no key/cert provided, we generate self-signed certificates
def String spProxyKeyFile = "${buildDir}/sp_proxy_key.pem"
def String spProxyCertificateFile = "${buildDir}/sp_proxy_certificate.pem"
def String spProxyCacertificateFile = "${buildDir}/sp_proxy_cacertificate.pem"

def String idpProxyKeyFile = "${buildDir}/idp_proxy_key.pem"
def String idpProxyCertificateFile = "${buildDir}/idp_proxy_certificate.pem"
def String idpProxyCacertificateFile = "${buildDir}/idp_proxy_cacertificate.pem"

def String idpSigningKeyFile = "${buildDir}/idp-signing.key"
def String idpSigningCertificateFile = "${buildDir}/idp-signing.crt"

def String idpEncryptionKeyFile = "${buildDir}/idp-encryption.key"
def String idpEncryptionCertificateFile = "${buildDir}/idp-encryption.crt"

def String opensslConfigurationFile = project.hasProperty('openssl.configuration.file') ? project['openssl.configuration.file'] : '/System/Library/OpenSSL/openssl.cnf'

task prepareIDPProxySecrets {
    onlyIf { !file(idpProxyKeyFile).exists() || !file(idpProxyCertificateFile).exists() || !file(idpProxyCacertificateFile).exists() }
    buildDir.mkdir()

    doFirst {
        // Generating a self-signed certificate with a SAN can only be done using a configuration file
	assert file(opensslConfigurationFile).exists()
        new File('/tmp/openssl.cnf').write(file(opensslConfigurationFile).text + '\n[SAN]\nsubjectAltName=DNS:iuk-auth-localdev')

        // a valid CA certificate is required for the data service to work
        assert project.hasProperty('idp.proxy.key')
        new File(idpProxyKeyFile).write(project['idp.proxy.key'])
        assert project.hasProperty('idp.proxy.certificate')
        new File(idpProxyCertificateFile).write(project['idp.proxy.certificate'])
        assert project.hasProperty('idp.proxy.cacertificate')
        new File(idpProxyCacertificateFile).write(project['idp.proxy.cacertificate'])
    }

    doLast {
        copy {
            from file(idpProxyKeyFile)
            from file(idpProxyCertificateFile)
            from file(idpProxyCacertificateFile)
            into idpCertsVolume
        }
    }
}

task prepareIDPSigningSecrets(type: Exec) {
    onlyIf { !file(idpSigningKeyFile).exists() || !file(idpSigningCertificateFile).exists() }
    buildDir.mkdir()

    executable = 'openssl'
    args = ['req', '-x509',
            '-newkey', 'rsa:4096',
            '-keyout', idpSigningKeyFile,
            '-out', idpSigningCertificateFile,
            '-days', '3650',
            '-nodes',
            '-subj', '/C=GB/ST=Wiltshire/L=Swindon/O=Innovate UK/OU=IFS/CN=auth.local-dev'
    ]
    doLast {
	copy {
            from file(idpSigningKeyFile)
            from file(idpSigningCertificateFile)
            into idpCertsVolume
        }
    }
}

task prepareIDPEncryptionSecrets(type: Exec) {
    onlyIf { !file(idpEncryptionKeyFile).exists() || !file(idpEncryptionCertificateFile).exists() }
    buildDir.mkdir()

    executable = 'openssl'
    args = ['req', '-x509',
            '-newkey', 'rsa:4096',
            '-keyout', idpEncryptionKeyFile,
            '-out', idpEncryptionCertificateFile,
            '-days', '3650',
            '-nodes',
            '-subj', '/C=GB/ST=Wiltshire/L=Swindon/O=Innovate UK/OU=IFS/CN=auth.local-dev'
    ]
    doLast {
	copy {
            from file(idpEncryptionKeyFile)
            from file(idpEncryptionCertificateFile)
            into idpCertsVolume
        }
    }
}

task prepareSPSecrets(type: Exec) {
    onlyIf { !file(spProxyKeyFile).exists() || !file(spProxyCertificateFile).exists() || !file(spProxyCacertificateFile).exists() }
    buildDir.mkdir()

    executable = 'openssl'
    args = ['req', '-x509',
            '-newkey', 'rsa:4096',
            '-keyout', spProxyKeyFile,
            '-out', spProxyCertificateFile,
            '-days', '3650',
            '-nodes',
            '-subj', '/C=GB/ST=Wiltshire/L=Swindon/O=Innovate UK/OU=IFS/CN=ifs.local-dev'
    ]
    doLast {
        copy {
            from file(spProxyCertificateFile)
            into buildDir
            rename 'sp_proxy_certificate.pem', 'sp_proxy_cacertificate.pem'
        }
        copy {
            from file(spProxyKeyFile)
            from file(spProxyCertificateFile)
            from file(spProxyCacertificateFile)
            into spCertsVolume
        }
    }
}

task prepareSecrets {
    dependsOn prepareIDPProxySecrets
    dependsOn prepareIDPSigningSecrets
    dependsOn prepareIDPEncryptionSecrets
    dependsOn prepareSPSecrets

    // on top of their respective certificates SP and IDP need each other's
    doLast {
        copy {
            from file(spProxyCertificateFile)
            into idpCertsVolume
        }
        copy {
            from file(idpSigningCertificateFile)
            from file(idpEncryptionCertificateFile)
            into spCertsVolume
        }
    }
}

