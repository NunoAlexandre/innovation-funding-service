import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.apache.tools.ant.filters.ReplaceTokens

dependencies{
    runtime project(path: ':ifs-auth-service:ifs-registration-service', configuration: 'war')
}

def String oracleJdkDomain = project.properties['oracle.jdk.domain'] ?:"http://download.oracle.com"

def String idpCertsVolume = 'src/main/docker/certs'

def String idpProxyKeyFile = "${idpCertsVolume}/idp_proxy_key.pem"
def String idpProxyCertificateFile = "${idpCertsVolume}/idp_proxy_certificate.pem"
def String idpProxyCacertificateFile = "${idpCertsVolume}/idp_proxy_cacertificate.pem"

def String spProxyCertificateFile = "${idpCertsVolume}/sp_proxy_certificate.pem"

def String idpSigningKeyFile = "${idpCertsVolume}/idp-signing.key"
def String idpSigningCertificateFile = "${idpCertsVolume}/idp-signing.crt"
def String idpEncryptionKeyFile = "${idpCertsVolume}/idp-encryption.key"
def String idpEncryptionCertificateFile = "${idpCertsVolume}/idp-encryption.crt"

def String ldapEncryptionCertificateFile = "${idpCertsVolume}/ldap-encryption.crt"
def String authIdpRegapiKey = project.properties['auth.idp.regapikey'] ?:"1234567890"
def String javaKeystorePassword = project.properties['java.keystore.password'] ?:"changeit"


task prepareDockerFile {
    dependsOn ':ifs-auth-service:prepareSecrets'

    outputs.upToDateWhen { false }

    def String idpProxyKey = file(idpProxyKeyFile).text.trim().replace('\n', '\\n')
    def String idpProxyCertificate = file(idpProxyCertificateFile).text.trim().replace('\n', '\\n')
    def String idpProxyCacertificate = file(idpProxyCacertificateFile).text.trim().replace('\n', '\\n')

    def String spProxyCertificate = file(spProxyCertificateFile).text.trim().replace('\n', '\\n')

    def String idpSigningKey = file(idpSigningKeyFile).text.trim().replace('\n', '\\n')
    def String idpSigningCertificate = file(idpSigningCertificateFile).text.trim().replace('\n', '\\n')
    def String idpEncryptionKey = file(idpEncryptionKeyFile).text.trim().replace('\n', '\\n')
    def String idpEncryptionCertificate = file(idpEncryptionCertificateFile).text.trim().replace('\n', '\\n')

    def String ldapEncryptionCertificate = file(ldapEncryptionCertificateFile).text.trim().replace('\n', '\\n')

    copy {
        from 'src/main/docker/'
        into 'src/main/docker/'
        include 'Dockerfile-base-template'
        rename 'Dockerfile-base-template', 'Dockerfile-base'
        filter(ReplaceTokens, tokens: [oracle_jdk_domain: oracleJdkDomain])
    }

    copy {
        from 'src/main/docker/'
        into 'src/main/docker/'
        include 'Dockerfile-template'
        rename 'Dockerfile-template', 'Dockerfile'
        filter(ReplaceTokens, tokens: [auth_idp_regapikey: authIdpRegapiKey,
                                       auth_idp_proxy_key: idpProxyKey,
                                       auth_idp_proxy_certificate: idpProxyCertificate,
                                       auth_idp_proxy_cacertificate: idpProxyCacertificate,
                                       auth_sp_proxy_certificate: spProxyCertificate,
                                       auth_idp_signing_key: idpSigningKey,
                                       auth_idp_signing_certificate: idpSigningCertificate,
                                       auth_idp_encryption_key: idpEncryptionKey,
                                       auth_idp_encryption_certificate: idpEncryptionCertificate,
                                       auth_ldap_encryption_certificate: ldapEncryptionCertificate,
                                       java_keystore_password: javaKeystorePassword,
                                       version: project.properties['version']])
   }
}

task buildDockerBaseImage(type: DockerBuildImage) {
    dependsOn ':ifs-auth-service:ifs-registration-service:build'
    dependsOn prepareDockerFile

    tag = 'ifshibdev/idp-base:latest'
    inputDir = project.file("$project.buildDir/docker-base")

    if (!inputDir.exists()) {
      inputDir.mkdirs()
    }

    doFirst {
        copy {
            from file('src/main/docker/Dockerfile-base')
            into inputDir
            rename 'Dockerfile-base', 'Dockerfile'
        }

        copy {
            from file('src/main/docker/idp/default-jre-headless-dummy_1.0_all.deb')
            into "${inputDir}/idp"
        }
    }
}

task buildDocker(type: DockerBuildImage) {
    dependsOn ':ifs-auth-service:ifs-registration-service:build'
    dependsOn prepareDockerFile

    inputDir = project.file("$project.buildDir/docker")
    tag = 'innovateuk/idp-service:latest'

    if (!inputDir.exists()) {
      inputDir.mkdirs()
    }

    doFirst {
        copy {
            from file('src/main/docker/Dockerfile')
            into inputDir
        }
        copy {
            from fileTree('src/main/docker/apache')
            into "${inputDir}/apache"
        }
        copy {
            from fileTree('src/main/docker/idp')
            into "${inputDir}/idp"
        }
        copy {
            from fileTree('src/main/docker/scripts')
            into "${inputDir}/scripts"
        }
        copy {
            from fileTree('src/main/docker/pages')
            into "${inputDir}/pages"
        }
        copy {
            from file('src/main/docker/default-jre-headless-dummy_1.0_all.deb')
            into inputDir
        }
        copy {
            from fileTree('src/main/docker/certs')
            into "${inputDir}/certs"
        }
        configurations.runtime.setTransitive(false).resolvedConfiguration.resolvedArtifacts
                .each { artifact ->
            project.copy {
                from artifact.file
                into "${inputDir}/idp"
            }
        }
    }
}
