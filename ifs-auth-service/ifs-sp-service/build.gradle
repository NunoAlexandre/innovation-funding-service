import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.apache.tools.ant.filters.ReplaceTokens

def String spCertsVolume = 'src/main/docker/certs'

def String spProxyKeyFile = "${spCertsVolume}/sp_proxy_key.pem"
def String spProxyCertificateFile = "${spCertsVolume}/sp_proxy_certificate.pem"
def String spProxyCacertificateFile = "${spCertsVolume}/sp_proxy_cacertificate.pem"

def String idpSigningCertificateFile = "${spCertsVolume}/idp-signing.crt"
def String idpEncryptionCertificateFile = "${spCertsVolume}/idp-encryption.crt"

task prepareDockerFile(type: Copy) {
    dependsOn ':ifs-auth-service:prepareSecrets'

    outputs.upToDateWhen { false }

    def String spProxyKey = file(spProxyKeyFile).text.trim().replace('\n', '\\n')
    def String spProxyCertificate = file(spProxyCertificateFile).text.trim().replace('\n', '\\n')
    def String spProxyCacertificate = file(spProxyCacertificateFile).text.trim().replace('\n', '\\n')

    def String idpSigningCertificate = file(idpSigningCertificateFile).text.trim().replace('\n', '\\n')
    def String idpEncryptionCertificate = file(idpEncryptionCertificateFile).text.trim().replace('\n', '\\n')

    from 'src/main/docker/'
    into 'src/main/docker/'
    include 'Dockerfile-template'
    rename 'Dockerfile-template', 'Dockerfile'
    filter(ReplaceTokens, tokens: [auth_sp_proxy_key: spProxyKey,
                                   auth_sp_proxy_certificate: spProxyCertificate,
                                   auth_sp_proxy_cacertificate: spProxyCacertificate,
                                   auth_idp_signing_certificate: idpSigningCertificate,
                                   auth_idp_encryption_certificate: idpEncryptionCertificate])
}

task buildDocker(type: DockerBuildImage) {
    dependsOn prepareDockerFile

    tag = 'innovateuk/sp-service:latest'
    inputDir = project.file("$project.buildDir/docker")

    if (!inputDir.exists()) {
      inputDir.mkdirs()
    }

    doFirst {
        copy {
            from file('src/main/docker/Dockerfile')
            into inputDir
        }
        copy {
            from fileTree('src/main/docker/files')
            into "${inputDir}/files"
        }
        copy {
            from fileTree('src/main/docker/certs')
            into "${inputDir}/certs"
        }
    }
}
