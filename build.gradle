allprojects {
    group 'worth'
    version '1.0-SNAPSHOT'

    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


subprojects {
    apply plugin: 'spring-boot'
    apply plugin: 'com.bluepapa32.watch'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'war'
    apply plugin: "jacoco"

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['**/*Mapper**'])
            })
        }
    }

    task codeCoverage {
        dependsOn cleanTest
        dependsOn test
        dependsOn jacocoTestReport
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"

        // Test Libraries
        testCompile group: 'org.hamcrest', name: 'hamcrest-core'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'org.springframework:spring-test'
        testCompile 'org.mockito:mockito-core'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library'
    }

    repositories {
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }
}

buildscript {

    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE"
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.5'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'org.flywaydb:flyway-core:3.2.1'
        classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}


apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.projectName", "IFS_Project"
        property "sonar.host.url", "https://devops.innovateuk.org/code-quality/"
           // property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
        property "sonar.exclusions", "**/*MapperImpl.java"
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

tasks.withType(Test) {
    // experiment with different values to see what works best
    // maxParallelForks = 4
    // can also compute dynamically
    maxParallelForks = Runtime.runtime.availableProcessors() / 2
}

task cleanDeploy {
    println "Starting clean deploy"
}
