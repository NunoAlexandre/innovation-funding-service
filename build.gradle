allprojects {
    group 'worth'
    version '1.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'docker'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

subprojects {
    apply plugin: 'spring-boot'
    apply plugin: 'com.bluepapa32.watch'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['**/*Mapper**'])
            })
        }
    }

    task codeCoverage {
        dependsOn cleanTest
        dependsOn test
        dependsOn jacocoTestReport
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.boot:spring-boot-actuator-docs"
        compile "org.springframework.boot:spring-boot-devtools"
        compile 'de.codecentric:spring-boot-admin-starter-client:1.3.5'
        compile 'org.jolokia:jolokia-core'
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
        compile 'org.realityforge.gelf4j:gelf4j:1.10'

        // Test Libraries
        testCompile group: 'org.hamcrest', name: 'hamcrest-core'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'org.springframework:spring-test'
        testCompile 'org.mockito:mockito-core'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library'
    }

    repositories {
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    jar {
        manifest.attributes provider: 'gradle'
    }
}

buildscript {

    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.5'
        classpath 'org.flywaydb:flyway-gradle-plugin:4.0'
        classpath 'org.flywaydb:flyway-core:4.0'
        classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.owasp:dependency-check-gradle:1.4.0'
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.13"
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}


apply plugin: "org.sonarqube"
apply plugin: 'docker-compose'


sonarqube {
    properties {
        property "sonar.projectName", "IFS_Project"
        property "sonar.host.url", "https://devops.innovateuk.org/code-quality/"
        property "sonar.projectKey", "com.worth:ifs"
        property "sonar.branch", "ifs"
        // property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
        property "sonar.exclusions", "**/*MapperImpl.java"
    }
}

dockerCompose {
    useComposeFiles = ['docker-compose-microservices.yml']
    stopContainers = false
    removeContainers = false
    removeImages = "None" // Other accepted values are: "All" and "Local"
    removeVolumes = false
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

task cleanDeployMicroservices {
    println "Starting clean deploy docker"
    composeUp
}

//make sure that top level clean deploy docker is run last
rootProject.subprojects.each { subproject ->
    subproject.tasks.matching { it.name == "cleanDeployMicroservices" }.all { task ->
        rootProject.tasks.findByName("cleanDeployMicroservices").mustRunAfter task
    }
}

