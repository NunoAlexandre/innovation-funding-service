allprojects {
    group 'innovateuk'
    version project.version

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'docker'
    apply plugin: 'com.github.ben-manes.versions'


    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

apply from: "openshift-support.gradle"



if(!project.hasProperty('osTestArgs')) {
    ext.osTestArgs = ""
}

build.enabled = false
jar.enabled=false

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'

    findMainClass.enabled = false

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['**/*Mapper**'])
            })
        }

        task prepareDockerFile (type: Copy) {
            outputs.upToDateWhen { false }
            from 'src/main/docker/'
            into 'src/main/docker/'
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter(ReplaceTokens, tokens: [version : project.properties['version']])
        }
    }

    task codeCoverage {
        dependsOn cleanTest
        dependsOn test
        dependsOn jacocoTestReport
    }


    dependencies {
        if(project.hasProperty("cloud") && project.cloud == "development") {
            compile 'de.codecentric:spring-boot-admin-starter-client:1.3.5'
            compile "org.springframework.boot:spring-boot-actuator-docs"
            compile "org.springframework.boot:spring-boot-devtools"
        }

        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
        compile 'org.realityforge.gelf4j:gelf4j:1.10'

        // Test Libraries
        testCompile group: 'org.hamcrest', name: 'hamcrest-core'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.mockito:mockito-core'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library'
    }

    repositories {
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    test {
        beforeTest { desc ->
            println "Executing test ${desc.className}.${desc.name}"
        }
    }
}

buildscript {

    ext['thymeleaf.version'] = '3.0.3.RELEASE'

    ext {
        springBootVersion = '1.5.2.RELEASE'
        thymeleafVersion = ext['thymeleaf.version']
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }

    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.5'
        classpath 'org.flywaydb:flyway-gradle-plugin:4.0'
        classpath 'org.flywaydb:flyway-core:4.0'
        classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.owasp:dependency-check-gradle:1.4.5'
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.21"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath 'net.researchgate:gradle-release:2.4.0'
	    classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
    }

}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            // filters out any version numbers ending in rejected. e.g 1.0.0-rc.
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr1', 'Beta'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}


apply plugin: "org.sonarqube"
apply plugin: 'docker-compose'
apply plugin: 'net.researchgate.release'
apply plugin: "com.github.hierynomus.license"

release {
    preTagCommitMessage = '[Gradle Release Plugin] - Performing release: '
    newVersionCommitMessage = '[Gradle Release Plugin] - Preparing new release version: '
    //Note: When testing releases (i.e. not performing real releases) this tagTemplate should be changed to something different
    // for example tagTemplate = 'TEST RELEASE ${version} ' this will ensure that we don't pollute our tags with fake releases.
    tagTemplate = '${version}'

    scmAdapters = [
            net.researchgate.release.GitAdapter,
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
    }
}



sonarqube {
    properties {
        property "sonar.projectName", "IFS_Project"
        property "sonar.host.url", "https://devops.innovateuk.org/code-quality/"
        property "sonar.projectKey", "org.innovateuk:ifs"
        property "sonar.branch", "ifs"
        // property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
        property "sonar.exclusions", "**/*MapperImpl.java"
    }
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml' ,'docker-compose-dev.yml']
    removeContainers = false
    removeImages = "Local" // Accepted values are: "All", "Local" and "None"
    removeVolumes = false

}

task prepareComposeFile (type: Copy) {
    outputs.upToDateWhen { false }
    from '.'
    into '.'
    include 'docker-compose-template.yml'
    rename 'docker-compose-template.yml', 'docker-compose.yml'
    filter(ReplaceTokens, tokens: [version : project.properties['version']])
}

task dockerTidy(type:Exec) {
    executable = 'setup-files/scripts/docker/docker_tidy_up.sh'
    args = [project.version]
}

composeUp.dependsOn prepareComposeFile

import org.apache.tools.ant.filters.*

task happyRobotTests(type:Exec) {
    workingDir 'robot-tests'
    commandLine './micro_run_tests.sh', '-hnw'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}
