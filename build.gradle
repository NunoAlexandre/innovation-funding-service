allprojects {
    group 'innovateuk'
    version '1.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'docker'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


if(project.hasProperty('profile') && profile == 'automated') {
    ext.openshiftEnv = project.properties['openshiftEnv'] ?: "automated"
}

if(!project.hasProperty('osTestArgs')) {
    ext.osTestArgs = ""
}

build.enabled = false
jar.enabled=false

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'
    findMainClass.enabled = false

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['**/*Mapper**'])
            })
        }
    }

    task codeCoverage {
        dependsOn cleanTest
        dependsOn test
        dependsOn jacocoTestReport
    }


    dependencies {
        if(project.hasProperty("cloud") && project.cloud == "development") {
            compile 'de.codecentric:spring-boot-admin-starter-client:1.3.5'
            compile "org.springframework.boot:spring-boot-actuator-docs"
            compile "org.springframework.boot:spring-boot-devtools"
        }

        compile "org.springframework.boot:spring-boot-starter-actuator"
        compile "org.springframework.boot:spring-boot-starter-web"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
        compile 'org.realityforge.gelf4j:gelf4j:1.10'

        // Test Libraries
        testCompile group: 'org.hamcrest', name: 'hamcrest-core'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.mockito:mockito-core'
        testCompile group: 'org.hamcrest', name: 'hamcrest-library'
    }

    repositories {
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    test {
        beforeTest { desc ->
            println "Executing test ${desc.className}.${desc.name}"
        }
    }
}

buildscript {

    ext['thymeleaf.version'] = '3.0.3.RELEASE'

    ext {
        springBootVersion = '1.5.1.RELEASE'
        thymeleafVersion = ext['thymeleaf.version']
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.5'
        classpath 'org.flywaydb:flyway-gradle-plugin:4.0'
        classpath 'org.flywaydb:flyway-core:4.0'
        classpath 'org.sonarqube.gradle:gradle-sonarqube-plugin:1.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.owasp:dependency-check-gradle:1.4.0'
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.13"
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }

}


apply plugin: "org.sonarqube"
apply plugin: 'docker-compose'

sonarqube {
    properties {
        property "sonar.projectName", "IFS_Project"
        property "sonar.host.url", "https://devops.innovateuk.org/code-quality/"
        property "sonar.projectKey", "org.innovateuk:ifs"
        property "sonar.branch", "ifs"
        // property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
        property "sonar.exclusions", "**/*MapperImpl.java"
    }
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml' ,'docker-compose-dev.yml']
    removeContainers = false
    removeImages = "Local" // Accepted values are: "All", "Local" and "None"
    removeVolumes = false

}


task robotTestsFilter (type: Copy) {
    from 'robot-tests/IFS_acceptance_tests/resources/variables/'
    into 'robot-tests/IFS_acceptance_tests/resources/variables/'
    include 'EMAIL_VARIABLES_TEMPLATE.robot'
    rename 'EMAIL_VARIABLES_TEMPLATE.robot', 'EMAIL_VARIABLES_SENSITIVE.robot'
    filter(ReplaceTokens, tokens: [test_mailbox_one_password : project.properties['ifs.robot.mailbox.one.password'], test_mailbox_two_password : project.properties['ifs.robot.mailbox.two.password']])
}


task osDeployRemote(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "remote"]
}

task osDeployLocal(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "local"]
}

task osTestRemote(type:Exec) {
    dependsOn robotTestsFilter
    executable = 'setup-files/scripts/openshift/os-test-remote.sh'
    args = [openshiftEnv, osTestArgs]
}

import org.apache.tools.ant.filters.*
task osStopTests(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-stop-tests.sh'
    args = [openshiftEnv]
}

task osTestResults(type:Exec) {
    executable = 'setup-files/scripts/openshift/os-test-results.sh'
    args = [openshiftEnv]
}

task happyRobotTests(type:Exec) {
    workingDir 'robot-tests'
    commandLine './micro_run_tests.sh', '-hnw'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
