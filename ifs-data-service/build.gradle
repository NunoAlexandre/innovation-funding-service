def targetBuild = hasProperty('profile') ? profile : 'docker';
apply from: targetBuild+"-build.gradle";

apply from: "script-support.gradle"

apply plugin: 'base'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'org.asciidoctor.convert'

task('copyFreemarkerResources', type: Copy) {
//Copy freemarker resources to build path to support running as a jar.
    from 'src/main/java/org/innovateuk/ifs/notifications/templates'
        into 'build/classes/main/org/innovateuk/ifs/notifications/templates'
        include '**/*'
}

compileJava.dependsOn copyFreemarkerResources


configurations {
    providedRuntime
}

//
// Workaround for https://github.com/spring-projects/spring-boot/issues/8308
// Can reinstate excludeDevtools in the bootRepackage task in next release
//
springBoot {
    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
}

bootRepackage {
    mainClass = 'org.innovateuk.ifs.Application'
//    excludeDevtools = !(project.hasProperty('cloud') && cloud == 'development');
}

ext {
    snippetsDir = file('build/generated-snippets')
    javaLanguageLevel = 1.8
    generatedMapperSourcesDir = 'build/classes/main/org/innovateuk/ifs/mappers'
}

ext.idpRestKey=project.properties['idp.rest.key'] ?:"123456789"
ext.companyHouseKey=ext.get('ifs.company-house.key')
ext.ifsWebSystemUserId="8394d970-b250-4b15-9621-3534325691b4"

sourceSets {
    client {
        java {
            srcDir 'src/main/java'
        }
        main {
            ext.originalJavaSrcDirs = java.srcDirs
            java.srcDir "${generatedMapperSourcesDir}"
        }
    }
}

bootRun {
    addResources = false
}

ext {
    snippetsDir = file('build/generated-snippets')
}

// Spring Boot 1.3 uses Spring REST Docs 1.0. To use 1.1, override the version
ext['spring-restdocs.version']='1.1.2.RELEASE'

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    baseName = 'ifs-data-service'
}

configurations {
    mapstruct
}

dependencies {
    compile project(":ifs-data-service:data-service-commons")

    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.hibernate:hibernate-core:5.2.7.Final"
    compile "org.hibernate:hibernate-validator:5.2.4.Final"
    compile "org.springframework.security:spring-security-crypto"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "mysql:mysql-connector-java"
    compile "org.springframework:spring-web"
    compile "com.jayway.jsonpath:json-path-assert:2.0.0"
    compile "com.jayway.jsonpath:json-path"
    compile "org.springframework.statemachine:spring-statemachine-core:1.1.0.RELEASE"
    compile "org.springframework.statemachine:spring-statemachine-recipes-common:1.1.0.RELEASE"
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-codec:commons-codec:1.10'
    compile "commons-beanutils:commons-beanutils:1.8.3"
    compile "org.flywaydb:flyway-core:4.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "org.mapstruct:mapstruct:1.0.0.Final"
    mapstruct 'org.mapstruct:mapstruct-processor:1.0.0.Final'
    compile 'org.freemarker:freemarker:2.3.23'
    compile "org.apache.poi:poi:3.14"
    compile "org.apache.poi:poi-ooxml:3.14"

    compile 'javax.mail:mail:1.4.7'
    compile "org.apache.httpcomponents:httpasyncclient"
    compile "com.google.guava:guava:19.0"
    compile "commons-io:commons-io:2.4"
    compile 'org.jsoup:jsoup:1.10.2'
    compile "net.sf.opencsv:opencsv:2.3"
    compile "org.xhtmlrenderer:flying-saucer-core:9.1.0"
    compile "org.xhtmlrenderer:flying-saucer-pdf:9.1.0"


    testCompile project(':ifs-resources').sourceSets.test.output
    testCompile project(":ifs-commons").sourceSets.test.output

    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE"
    testCompile "com.openpojo:openpojo:0.8.3"
    testCompile "org.skyscreamer:jsonassert:1.3.0"
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = 'data-service'
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy{
            from jar
            into stageDir
        }
        copy{
            from file('src/main/docker/certificate')
            into stageDir
        }
    }
}

asciidoctor {
    attributes 'snippets': snippetsDir
    backends  'html5'
    inputs.dir snippetsDir
    dependsOn test
}

task generateMainMapperClasses(type: JavaCompile) {
    ext.aptDumpDir = file( "build/tmp/apt/mapstruct" )
    destinationDir = aptDumpDir

    classpath = compileJava.classpath + configurations.mapstruct
    source = sourceSets.main.originalJavaSrcDirs
    ext.sourceDestDir = file generatedMapperSourcesDir

    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-processor", "org.mapstruct.ap.MappingProcessor",
                    "-s", sourceDestDir.absolutePath,
                    "-source", 1.8,
                    "-target", 1.8,
            ]
    );

    inputs.dir source
    outputs.dir generatedMapperSourcesDir
    doFirst {
        sourceDestDir.mkdirs()
    }
    doLast {
        aptDumpDir.delete()
    }
}


//noinspection GroovyMissingReturnStatement
processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
}

processTestResources {
    filesMatching("*.properties") {
        expand project.properties
    }
}

compileJava.dependsOn generateMainMapperClasses
flywayMigrate.dependsOn processResources
flywayClean.dependsOn processResources


task initDB() {

    flywayClean.mustRunAfter startMySql
    createTestSchema.mustRunAfter startMySql
    createSchema.mustRunAfter startMySql
    flywayMigrate.mustRunAfter flywayClean

    dependsOn startMySql
    dependsOn createTestSchema
    dependsOn createSchema
    dependsOn flywayClean
    dependsOn flywayMigrate

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
