def targetBuild = hasProperty('profile') ? profile : 'dev';
apply from: targetBuild+"-build.gradle";


apply plugin: 'war'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'org.asciidoctor.convert'

war {
    baseName = 'ifs-data-service'
    version = '0.0.1-SNAPSHOT'
}

configurations {
    providedRuntime
    clientCompile
}

bootRepackage {
    mainClass = 'com.worth.ifs.Application'
}

ext {
    snippetsDir = file('build/generated-snippets')
    javaLanguageLevel = 1.8
    generatedMapperSourcesDir = 'build/classes/main/com/worth/ifs/mappers'
}

sourceCompatibility = 1.8

sourceSets {
    client {
        java {
            srcDir 'src/main/java'
        }
        main {
            ext.originalJavaSrcDirs = java.srcDirs
            java.srcDir "${generatedMapperSourcesDir}"
        }
    }
}

bootRun {
    addResources = false
}

ext {
    snippetsDir = file('build/generated-snippets')
}

// Spring Boot 1.3 uses Spring REST Docs 1.0. To use 1.1, override the version
ext['spring-restdocs.version']='1.1.2.RELEASE'

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

configurations {
    mapstruct
}


dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.hibernate:hibernate-validator:5.2.4.Final"
    compile "org.springframework.security:spring-security-crypto"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "mysql:mysql-connector-java"
    compile "org.springframework:spring-web"
    compile "com.jayway.jsonpath:json-path-assert:2.0.0"
    compile "com.jayway.jsonpath:json-path"
    compile "org.springframework.statemachine:spring-statemachine-core:1.1.0.RELEASE"
    compile "org.springframework.statemachine:spring-statemachine-recipes-common:1.1.0.RELEASE"
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-codec:commons-codec:1.10'
    compile "org.flywaydb:flyway-core:4.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "org.mapstruct:mapstruct:1.0.0.Final"
    mapstruct 'org.mapstruct:mapstruct-processor:1.0.0.Final'
    compile 'org.freemarker:freemarker:2.3.23'
    compile "org.apache.poi:poi:3.14"
    compile "org.apache.poi:poi-ooxml:3.14"

    compile 'javax.mail:mail:1.4.7'
    compile "org.apache.httpcomponents:httpasyncclient"
    compile "com.google.guava:guava:19.0"
    compile "commons-io:commons-io:2.4"
    compile 'org.jsoup:jsoup:1.9.1'
    compile "net.sf.opencsv:opencsv:2.3"

    //providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile fileTree(dir: "libs", include: "*.jar")

    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE"
    testCompile "com.openpojo:openpojo:0.8.3"
    testCompile "org.skyscreamer:jsonassert:1.3.0"
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }
}

asciidoctor {
    attributes 'snippets': snippetsDir
    backends  'html5'
    inputs.dir snippetsDir
    dependsOn test
}

task generateMainMapperClasses(type: JavaCompile) {
    ext.aptDumpDir = file( "build/tmp/apt/mapstruct" )
    destinationDir = aptDumpDir

    classpath = compileJava.classpath + configurations.mapstruct
    source = sourceSets.main.originalJavaSrcDirs
    ext.sourceDestDir = file generatedMapperSourcesDir

    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-processor", "org.mapstruct.ap.MappingProcessor",
                    "-s", sourceDestDir.absolutePath,
                    "-source", 1.8,
                    "-target", 1.8,
            ]
    );

    inputs.dir source
    outputs.dir generatedMapperSourcesDir
    doFirst {
        sourceDestDir.mkdirs()
    }
    doLast {
        aptDumpDir.delete()
    }
}

task client(type: Jar) {
    baseName += '-public'
    from(sourceSets.main.output) {
        // filter to only include certain class files (Ant glob pattern)
        include "com/worth/ifs/**/service/**"
        include "com/worth/ifs/**/constant/**"
        include "com/worth/ifs/**/resource/**"
        include "com/worth/ifs/util/**"
        include "com/worth/ifs/commons/security/**"
        include "com/worth/ifs/commons/rest/**"
        include "com/worth/ifs/commons/error/**"
        include "com/worth/ifs/commons/validation/**"
        exclude "com/worth/ifs/**/transactional/**"
        exclude "com/worth/ifs/notifications/**"
        exclude "com/worth/ifs/authentication/**"
        exclude "com/worth/ifs/sil/**"
        exclude "com/worth/ifs/email/**"
    }
}
task clientCopy(type: Copy) {
    into "../ifs-libs"
    from "build/libs/"
    include "ifs-data-service-public*.jar"
}

task testCommonCode(type: Jar) {
    baseName += '-tests'
    from(sourceSets.test.output) {
        // filter to only include certain class files (Ant glob pattern)
        include "**/application-web-integration-test.properties"
        include "com/worth/ifs/commons/pojo/*.class"
        include "com/worth/ifs/commons/rest/*.class"
        include "com/worth/ifs/commons/security/*.class"
        include "com/worth/ifs/commons/service/*.class"
        include "com/worth/ifs/commons/util/date/*.class"
        include "com/worth/ifs/commons/*.class"
        include "com/worth/ifs/BaseBuilder.class"
        include "com/worth/ifs/Builder.class"
        include "com/worth/ifs/commons/test/*.class"
        include "com/worth/ifs/**/builder/*ResourceBuilder.class"
        include "com/worth/ifs/bankdetails/builder/ProjectBankDetailsStatusSummaryBuilder.class"
        include "com/worth/ifs/base/amend/BaseBuilderAmendFunctions.class"
    }
}
task testCommonCodeCopy(type: Copy){
    into "../ifs-libs"
    from "build/libs/"
    include("ifs-data-service-tests*.jar")
}

artifacts {
    archives client
}

task deployToTomcat(type: Copy) {
    from war
    into "$tomcatWebAppsDir"
    rename '(.*).war', 'ROOT.war'
}


watch {
    java {
        files files('src/main/java')
        tasks 'client', 'clientCopy', 'deployToTomcat'
    }

    resources {
        files files('src/main/resources')
        tasks 'deployToTomcat'
    }
}

//noinspection GroovyMissingReturnStatement
processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
}

processTestResources {
    filesMatching("*.properties") {
        expand project.properties
    }
}

compileJava.dependsOn generateMainMapperClasses
flywayMigrate.dependsOn processResources
flywayClean.dependsOn processResources

task cleanDeploy() {
    build.mustRunAfter clean
    clientCopy.mustRunAfter client
    testCommonCode.mustRunAfter build
    testCommonCodeCopy.mustRunAfter testCommonCode
    deployToTomcat.mustRunAfter build
    dependsOn clean
    dependsOn build
    dependsOn clientCopy
    dependsOn testCommonCode
    dependsOn testCommonCodeCopy
    dependsOn deployToTomcat
}