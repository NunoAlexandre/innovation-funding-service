if (project.hasProperty("profile")) {
    apply from: "${project.profile}-build.gradle"
} else {
    apply from: "dev-build.gradle"
}

apply plugin: 'org.flywaydb.flyway'
apply plugin: 'org.asciidoctor.convert'

war {
    baseName = 'ifs-data-service'
    version = '0.0.1-SNAPSHOT'
}

configurations {
    providedRuntime
    clientCompile
}

bootRepackage {
    mainClass = 'com.worth.ifs.Application'
}

sourceSets {
    client {
        java {
            srcDir 'src/main/java'
            include 'com/worth/ifs/domain'
        }
    }
}

bootRun {
    addResources = false
}

ext {
    snippetsDir = file('build/generated-snippets')
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.springframework.security:spring-security-crypto"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.data:spring-data-rest-hal-browser"
    compile "mysql:mysql-connector-java"
    compile "org.springframework:spring-web"
    compile "org.projectlombok:lombok:1.16.2"
    compile "com.jayway.jsonpath:json-path-assert:2.0.0"
    compile "org.springframework.hateoas:spring-hateoas"
    compile "com.jayway.jsonpath:json-path"
    compile "org.springframework.statemachine:spring-statemachine-core:1.0.0.RC1"
    compile "org.springframework.statemachine:spring-statemachine-recipes-common:1.0.0.RC1"
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-codec:commons-codec:1.10'
    compile "org.flywaydb:flyway-core:3.2.1"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile 'org.freemarker:freemarker:2.3.23'
    compile 'javax.mail:mail:1.4.7'

    //providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile fileTree(dir: "libs", include: "*.jar")

    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:1.0.0.RELEASE"
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    backends  'html5'
    inputs.dir snippetsDir
    dependsOn test
}

task client(type: Jar) {
    baseName += '-api'
    from(sourceSets.main.output) {
        // filter to only include certain class files (Ant glob pattern)
        include "com/worth/ifs/*/service/**"
        include "com/worth/ifs/*/domain/**"
        include "com/worth/ifs/*/dto/**"
        include "com/worth/ifs/*/constant/**"
        include "com/worth/ifs/*/resource/**"
        include "com/worth/ifs/util/**"
        include "com/worth/ifs/commons/security/**"
        exclude "com/worth/ifs/notifications/**"
        exclude "com/worth/ifs/sil/**"
        exclude "com/worth/ifs/email/**"
    }
}
task clientCopy(type: Copy){
    into "../ifs-web-service/libs"
    from "build/libs/"
    include "ifs-data-service-api*"
}

task testCommonCode(type: Jar) {
    baseName += '-tests'
    from(sourceSets.test.output) {
        // filter to only include certain class files (Ant glob pattern)
        include "com/worth/ifs/Builder.class"
        include "com/worth/ifs/BaseBuilder.class"
        include "com/worth/ifs/**/*Builder.class"
        include "com/worth/ifs/**/*BuilderAmendFunctions.class"
    }
}
task testCommonCodeCopy(type: Copy){
    into "../ifs-web-service/libs"
    from "build/libs/"
    include("ifs-data-service-tests*")
}

artifacts {
    archives client
}

task deployToTomcat(type: Copy) {
    from war
    into "$tomcatWebAppsDir"
    rename '(.*).war', 'ROOT.war'
}


watch {
    java {
        files files('src/main/java')
        tasks 'client', 'clientCopy', 'deployToTomcat'
    }

    resources {
        files files('src/main/resources')
        tasks 'deployToTomcat'
    }
}

//noinspection GroovyMissingReturnStatement
processResources {
    filesMatching("*.properties") {
        expand project.properties
    }
    if (project.hasProperty("profile") && project.profile == "automated") {
        exclude '**/application.properties'
    }
}

processTestResources {
    filesMatching("*.properties") {
        expand project.properties
    }
}

task cleanDeploy() {
    build.mustRunAfter clean
    clientCopy.mustRunAfter client
    testCommonCode.mustRunAfter build
    testCommonCodeCopy.mustRunAfter testCommonCode
    deployToTomcat.mustRunAfter build
    dependsOn clean
    dependsOn build
    dependsOn clientCopy
    dependsOn testCommonCode
    dependsOn testCommonCodeCopy
    dependsOn deployToTomcat
}
